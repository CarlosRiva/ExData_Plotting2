print
submit()
extract_numeric("class5")
?mutate
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extact_numeric(class5))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class5))
students3
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class1:class5))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = class1:class5 / extract_numeric(class1:class5))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class =  class1:class5 / extract_numeric(class1:class5))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class =  class1:class5 / extract_numeric(class1:class5))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class =  (class1:class5) / extract_numeric(class1:class5))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class =  class / extract_numeric(class1:class5))
mutate(class =  class / extract_numeric(class))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class =  class / extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class =  class / extract_numeric("class"))
students3
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1 =  class / extract_numeric("class1"), class1 =  class / extract_numeric("class2"))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1 =  class / (extract_numeric("class1")), class1 =  class / (extract_numeric("class2"))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1 =  class / (extract_numeric("class1"), class1 =  class / (extract_numeric("class2")
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1 =  class / (extract_numeric("class1"), class1 =  class / extract_numeric("class2")
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1 =  class / extract_numeric("class1"), class1 =  class / extract_numeric("class2")
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1 =  class / extract_numeric("class1"), class2 =  class / extract_numeric("class2")
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1 =  class / extract_numeric("class1"), class2 =  class2 / extract_numeric("class2"))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1 =  class / extract_numeric("class1"), class =  class2 / extract_numeric("class2"))
print
reset()
reset()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = class / extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = class / extract_numeric("class"))
?estract_numeric
?extract_numeric
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class =  class == extract_numeric("class"))
mutate(class = extract_numeric("class"))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric("class"))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
submit()
submit()
reset()
reset()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
%>%
mutate(class = extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class1 = extract_numeric(class))
submit()
submit(9)
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = (extract_numeric(class))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = class = extract_numeric(class))
print
mutate(class = class == extract_numeric(class))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = class == extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = class(extract_numeric(class)))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
### Call to mutate() goes here %>%
print
mutate(class = extract_numeric(class))
spread(test, grade) %>%
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric("class"))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
### Call to mutate() goes here %>%
print
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))%>%
### Call to mutate() goes here %>%
print
submit()
students4
student_info <- students4 %>%
select( id, name ,sex ) %>%
print
submit()
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique(id)
print
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique(id)%>%
print
?unique
student_info <- students4 %>%
select(id, name, sex) %>%
### Your code here %>%
unique()%>%
print
submit()
student_info <- students4 %>%
select(id, name, sex) %>%
unique()%>%
### Your code here %>%
print
submit()
gradebook <- students4 %>%
select(id, class, mideterm, final)%>%
### Your code here %>%
print
gradebook <- students4 %>%
select(id, class, mideterm, final)%>%
### Your code here %>%
print
gradebook <- students4 %>%
select(id, class, midterm, final)%>%
### Your code here %>%
print
submit()
passed
failed
mutate(passed, passed = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?rbind_list
rbind_list(failed, passed)
rbind_list(passed, failed)
sat
?separate
sat %>%
select(-contains(total)) %>%
gather(part_sex, value, -score_range) %>%
separate(part_sex, c("part","sex"))%>%
### <Your call to separate()> %>%
print
?contains
?select
sat %>%
select(-contains("total")) %>%
gather(part_sex, value, -score_range) %>%
separate(part_sex, c("part","sex"))%>%
### <Your call to separate()> %>%
print
subtmit()
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, value, -score_range) %>%
separate(part_sex, c("part","sex"))%>%
### <Your call to separate()> %>%
print
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, value, -score_range) %>%
separate(part_sex, c("part","sex"))%>%
### <Your call to separate()> %>%
print
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, value, -score_range) %>%
separate(part_sex, c("part","sex"))%>%
### <Your call to separate()> %>%
print
submit()
sat
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part","sex"))%>%
### <Your call to separate()> %>%
print
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex)%>%
### <Your call to group_by()> %>%
mutate(total = sum(count),
prop = count / total
) %>% print
submit()
library(swirl)
swirl()
swirl()
library(swirl)
ls()
rm(list=ls())
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12 1975")
dmy(25081985)
ymd("192012")
ymd("19/20/12")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 6, minutes = 20, seconds)
this_moment <- update(this_moment, hours = 6, minutes = 20, seconds = 55)
this_moment
now()
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, tzone("Asia/Hong_Kong"))
with_tz(arrive, tzone="Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17 2008")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
how_long
as_period(how_long)
as.period(how_long)
stopwatch()
Insall.packages("Lattice")
Insall.packages(Lattice)
Install.packages(Lattice)
Install.packages("Lattice")
install.packages(lattice)
install.packages("lattice")
install.packages("ggplot2")
x <- rnorm(100)
hist(x)}
hist(x)
y <- rnorm(100)
plot(x, y)
z <- norm(100)
z <- rnorm(100)
plot(x, z)
par(mar = c(2, 2, 2, 2))
plot(x, y)
par(mar = c(4, 4, 2, 2))
plot(x, y)
plat(x, y, pch = 20)
plot(x, y, pch = 20)
plot(x, y, pch = 3)
plot(x, y, pch = 2)
example(points)
plot(x, y, pch = 2)
plot(x, y, pch = 20)
plot(x, y)
y <- rnorm(100)
x <- rnorm(100)
plot(x, y, pch = 2)
title("helloworld")
text(-2, -2, "crg")
legend("topleft")
legend("topleft",)
legend("topleft", legend="Data")
legend("topleft", legend="Data" pch = 20)
legend("topleft", legend="Data", pch = 20)
fit <- lm(y ~ x)
abline(fit)
abline(fit, lwd = 3)
abline(fit, lwd = 3, col=blue)
abline(fit, lwd = 3, col="blue")
library(datasets)
with(faithful, plot(eruptions, waiting))
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "old")
dev.off()
if (!"load_data.R" %in% list.files()) { setwd("C:/Users/Carlos Riva/Documents/GitHub/Exploratory and data analysis/ExData_Plotting1")}
source("load_data.R")
datetime <- strptime(paste(newData$Date, newData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(newData$Global_active_power)
png("plot2.png", width=480, height=480)
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
rm(list=ls())
if (!"load_data.R" %in% list.files()) { setwd("C:/Users/Carlos Riva/Documents/GitHub/Exploratory and data analysis/ExData_Plotting1")}
source("load_data.R")
datetime <- strptime(paste(newData$Date, newData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(newData$Global_active_power)
subMetering1 <- as.numeric(newData$Sub_metering_1)
subMetering2 <- as.numeric(newData$Sub_metering_2)
subMetering3 <- as.numeric(newData$Sub_metering_3)
png("plot3.png", width=480, height=480)
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=1, lwd=2.5, col=c("black", "red", "blue"))
dev.off()
rm(list=ls())
if (!"load_data.R" %in% list.files()) { setwd("C:/Users/Carlos Riva/Documents/GitHub/Exploratory and data analysis/ExData_Plotting1")}
source("load_data.R")
datetime <- strptime(paste(newData$Date, newData$Time, sep=" "), "%d/%m/%Y %H:%M:%S")
globalActivePower <- as.numeric(newData$Global_active_power)
globalReactivePower <- as.numeric(newData$Global_reactive_power)
voltage <- as.numeric(newData$Voltage)
subMetering1 <- as.numeric(newData$Sub_metering_1)
subMetering2 <- as.numeric(newData$Sub_metering_2)
subMetering3 <- as.numeric(newData$Sub_metering_3)
png("plot4.png", width=480, height=480)
par(mfrow = c(2, 2))
plot(datetime, globalActivePower, type="l", xlab="", ylab="Global Active Power", cex=0.2)
plot(datetime, voltage, type="l", xlab="datetime", ylab="Voltage")
plot(datetime, subMetering1, type="l", ylab="Energy Submetering", xlab="")
lines(datetime, subMetering2, type="l", col="red")
lines(datetime, subMetering3, type="l", col="blue")
legend("topright", c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), lty=, lwd=2.5, col=c("black", "red", "blue"), bty="o")
plot(datetime, globalReactivePower, type="l", xlab="datetime", ylab="Global_reactive_power")
dev.off()
